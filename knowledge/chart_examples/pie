<user_request>
Create a comprehensive chart template that demonstrates advanced amCharts 5 features including interactive dual charts (pie and column), extensive event handling, cursor tracking, and export functionality. The template should show how to connect two charts interactively, handle various user interactions (clicks, hovers, wheel events), implement cursor-based zoom functionality, and provide export capabilities with proper event management. Include sample data with color-coded categories (Critical, Acceptable, Good) and breakdown data for detailed analysis.
</user_request>

<description>
This example serves as a comprehensive template demonstrating advanced amCharts 5 features and event handling. Key features include:

- **Dual Chart System**: Side-by-side donut pie chart and horizontal column chart with interactive connection
- **Interactive Slice Selection**: Clicking pie slices updates column chart data and colors dynamically
- **Comprehensive Event Handling**: Extensive event listeners for various user interactions:
  - Data validation events
  - Mouse events (click, double-click, wheel)
  - Selection and hover events (pointerover, pointerout)
  - Visibility change events
- **Advanced Cursor Features**: XY cursor with zoom behavior and position tracking
- **Export Functionality**: Built-in export menu with export lifecycle event handling
- **Sample Data Structure**: Three-tier categorization (Critical/Acceptable/Good) with breakdown arrays
- **Color Coordination**: Predefined color scheme with dynamic color inheritance between charts
- **Center Labels**: Dynamic pie chart center labels showing percentage and category
- **Console Logging**: Extensive logging for debugging and understanding event flow
- **Responsive Layout**: Horizontal container layout with 50/50 width distribution
- **Custom Styling**: Hidden tick marks, visible labels with value display
- **Animation System**: Smooth transitions and entrance animations

The template includes sample data representing different priority levels with detailed breakdowns for sales inquiries, support requests, bug reports, and other categories. This makes it an excellent starting point for creating interactive dashboards that require event-driven interactions and data drill-down capabilities.
</description>

<client_script>
function(chartdiv, scope) {
  const root = am5.Root.new(chartdiv);
  root.setThemes([ am5themes_Animated.new(root) ]);

  // Set up data
  var data = [{
    category: "Critical",
    value: 89,
    sliceSettings: {
      fill: am5.color(0xdc4534),
    },
    breakdown: [{
      category: "Sales inquiries",
      value: 29
    }, {
      category: "Support requests",
      value: 40
    }, {
      category: "Bug reports",
      value: 11
    }, {
      category: "Other",
      value: 9
    }]
  }, {
    category: "Acceptable",
    value: 71,
    sliceSettings: {
      fill: am5.color(0xd7a700),
    },
    breakdown: [{
      category: "Sales inquiries",
      value: 22
    }, {
      category: "Support requests",
      value: 30
    }, {
      category: "Bug reports",
      value: 11
    }, {
      category: "Other",
      value: 10
    }]
  }, {
    category: "Good",
    value: 120,
    sliceSettings: {
      fill: am5.color(0x68ad5c),
    },
    breakdown: [{
      category: "Sales inquiries",
      value: 60
    }, {
      category: "Support requests",
      value: 35
    }, {
      category: "Bug reports",
      value: 15
    }, {
      category: "Other",
      value: 10
    }]
  }]
  
  
  // Create wrapper container
  var container = root.container.children.push(am5.Container.new(root, {
    width: am5.p100,
    height: am5.p100,
    layout: root.horizontalLayout
  }));
  
  
  // ==============================================
  // Column chart
  // ==============================================
  
  // Create chart
  // https://www.amcharts.com/docs/v5/charts/xy-chart/
  var columnChart = container.children.push(am5xy.XYChart.new(root, {
    width: am5.p50,
    panX: false,
    panY: false,
    wheelX: "none",
    wheelY: "none",
    layout: root.verticalLayout
  }));
  
  // Create axes
  // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
  var yRenderer = am5xy.AxisRendererY.new(root, {});
  var yAxis = columnChart.yAxes.push(am5xy.CategoryAxis.new(root, {
    categoryField: "category",
    renderer: yRenderer
  }));
  
  yRenderer.grid.template.setAll({
    location: 1
  })
  
  var xAxis = columnChart.xAxes.push(am5xy.ValueAxis.new(root, {
    renderer: am5xy.AxisRendererX.new(root, {
      strokeOpacity: 0.1
    })
  }));
  
  
  // Add series
  // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
  var columnSeries = columnChart.series.push(am5xy.ColumnSeries.new(root, {
    name: name,
    xAxis: xAxis,
    yAxis: yAxis,
    valueXField: "value",
    categoryYField: "category",
 
  }));
  
  columnSeries.columns.template.setAll({
    tooltipText: "{categoryY}: {valueX}"
  });
  
  //series.data.setAll(data);
  
  // Make stuff animate on load
  // https://www.amcharts.com/docs/v5/concepts/animations/
  columnChart.appear(1000, 100);
  
  
  // ==============================================
  // Column chart
  // ==============================================
  
  var pieChart = container.children.push(
    am5percent.PieChart.new(root, {
      width: am5.p50,
      innerRadius: am5.percent(50)
    })
  );
  
  // Create series
  var pieSeries = pieChart.series.push(
    am5percent.PieSeries.new(root, {
      valueField: "value",
      categoryField: "category"
    })
  );
  
  pieSeries.slices.template.setAll({
    templateField: "sliceSettings",
    strokeOpacity: 0
  });
  
  var currentSlice;
  pieSeries.slices.template.on("active", function(active, slice) {
    if (currentSlice && currentSlice != slice && active) {
      currentSlice.set("active", false)
    }
  
    var color = slice.get("fill");
  
    label1.setAll({
      fill: color,
      text: root.numberFormatter.format(slice.dataItem.get("valuePercentTotal"), "#.'%'")
    });
  
    label2.set("text", slice.dataItem.get("category"));
  
    columnSeries.columns.template.setAll({
      fill: slice.get("fill"),
      stroke: slice.get("fill")
    });
  
    columnSeries.data.setAll(slice.dataItem.dataContext.breakdown);
    yAxis.data.setAll(slice.dataItem.dataContext.breakdown);
  
    currentSlice = slice;
  });
  
  pieSeries.labels.template.set("forceHidden", false);
  pieSeries.ticks.template.set("forceHidden", true);
  pieSeries.labels.template.setAll({
    text: "Value: {value}",
  });
  pieSeries.data.setAll(data);
  
  // Add label
  var label1 = pieChart.seriesContainer.children.push(am5.Label.new(root, {
    text: "",
    fontSize: 35,
    fontweight: "bold",
    centerX: am5.p50,
    centerY: am5.p50
  }));
  
  var label2 = pieChart.seriesContainer.children.push(am5.Label.new(root, {
    text: "",
    fontSize: 12,
    centerX: am5.p50,
    centerY: am5.p50,
    dy: 30
  }));
  
  
  // EVENTS
  pieSeries.events.on("datavalidated", function() {
    pieSeries.slices.getIndex(0).set("active", true);
    console.log("DataValidated")
  });
  
  pieChart.events.on("wheel", function(ev) {
   console.log("Wheel")
  });
  pieChart.events.on("click", function(ev) {
   console.log("Click")
  });
  
  pieChart.on("visible", function(visible, target) {
    console.log("visible", visible)
  });
  
  pieChart.events.on("dblclick", function(ev) {
    console.log("DBClick")
  });
  
  pieSeries.events.on("dataitemselected", function(ev) {
    console.log("dataitemselected: ",ev.dataItem.dataContext);
  });
  
  pieSeries.events.on("pointerover", function(e){
    console.log("pointerover")
  });
  
  pieSeries.events.on("pointerout", function(e){
    console.log("pointerout")
  });
  
  // cursore
  var cursor = columnChart.set("cursor", am5xy.XYCursor.new(root, {
    behavior: "zoomXY",
    xAxis: xAxis
  }));

  cursor.events.on("cursormoved", function(ev) {
    var x = ev.target.getPrivate("positionX");
    var y = ev.target.getPrivate("positionY");
    console.log("Cursormoved, x,y: ", {x, y})
  });
  
  // Add export
  var exporting = am5plugins_exporting.Exporting.new(root, {
    menu: am5plugins_exporting.ExportingMenu.new(root, {})
  });
  
  exporting.events.on("exportstarted", function() {
    title.show(0);
  });
  
  exporting.events.on("exportfinished", function() {
    title.hide(0);
  });

  return root;
}
</client_script>