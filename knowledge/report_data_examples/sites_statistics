<user_request>
Create a visual report with two cards: one displays the count of nominal sites (candidate_site_id IS NULL), the other displays the count of completed candidate sites (candidate_site_id IS NOT NULL and status NOT IN ('Inactive','New','Decommissioned')), each card is clickable and leads to the corresponding link.
</user_request>

<description>
The report implements statistics counting for the Site entity with two main metrics: number of nominal sites and number of completed candidate sites.

Model: site
Used fields:
candidate_site_id (type: integer / reference):
Used to determine nominality: IS NULL → site is nominal.
IS NOT NULL → site is a candidate.
status (type: string):
For candidates, filtering by status: includes only 'active', 'Temporary', 'Relocated'.

Server logic (Node.js, async function):
Gets the site model with disabled permission checking (check_permission: { all: false }).
Executes two queries:
siteModel.find({ candidate_site_id: 'ISNULL' }).count() — count of nominal sites.
siteModel.find({ candidate_site_id: 'ISNOTNULL', status: ['active', 'Temporary', 'Relocated'] }).count() — count of completed candidate sites.

Returns structure:
{
  main: {
    nominalSitesCount,
    completedCandidateSitesCount,
  }
}
</description>

<server_script>
async function(scope) {
  const siteModel = (await p.getModel('site')).setOptions({ check_permission: { all: false } });

  // Count of nominal sites: Candidate Site ID is empty
  const nominalSitesCount = await siteModel.find({ candidate_site_id: 'ISNULL' }).count();

  // Count of completed candidate sites
  const completedCandidateSitesCount = await siteModel
    .find({
      candidate_site_id: 'ISNOTNULL',
      status: ['active', 'Temporary', 'Relocated']
    })
    .count();

  return {
    main: {
      nominalSitesCount,
      completedCandidateSitesCount,
    },
  };
}
</server_script>