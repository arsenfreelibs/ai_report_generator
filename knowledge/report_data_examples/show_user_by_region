<user_request>
show user by region
</user_request>

This report displays user distribution across different regions based on user activity in the selected dataset. The analysis examines both record creators and updaters to identify unique users, then distributes them across active regions to show regional user engagement patterns.

The report provides:
- User count per region
- Individual user activity metrics (records created/updated)
- Regional ranking by user volume
- Detailed breakdown of user contributions within each region

Note: This implementation uses a demo distribution method across regions. In production, this would typically require a proper user-region relationship mapping through user profiles or organizational structure data.

</description>

<server_script>
async function(scope) {
  try {
    // Get the regions model to build region mapping
    const regionModel = (await p.getModel("regions")).setOptions({ check_permission: { all: false } });
    const regionMapping = {};
    
    // Build mapping of region ID to region name
    await p.iterEach(
      regionModel.find({ status: 'Active' }).fields(['id', 'name']).raw(),
      function(region) {
        regionMapping[region.id] = region.name;
      }
    );

    //Get user model
    const userModel = (await p.getModel('user')).setOptions({ check_permission: { all: false } });
    // Get all records from the current scope model to extract user references
    const records = await p.iterMap(
      userModel.find({}).fields(['id', 'created_by', 'updated_by', 'created_at']).raw(),
      record => record
    );

    // Create a map to track users by region
    const usersByRegion = {};
    const userSet = new Set();

    // Process records to extract unique users
    records.forEach(record => {
      if (record.created_by) {
        userSet.add(record.created_by);
      }
      if (record.updated_by) {
        userSet.add(record.updated_by);
      }
    });

    // Initialize region data structure
    Object.keys(regionMapping).forEach(regionId => {
      const regionName = regionMapping[regionId];
      usersByRegion[regionName] = {
        region_id: regionId,
        region_name: regionName,
        users: [],
        user_count: 0
      };
    });

    // For demonstration purposes, we'll distribute users across regions
    // In a real scenario, you'd need a proper user-region relationship
    const userArray = Array.from(userSet);
    const regionNames = Object.keys(regionMapping).map(id => regionMapping[id]);
    
    userArray.forEach((userId, index) => {
      const regionName = regionNames[index % regionNames.length];
      if (usersByRegion[regionName]) {
        usersByRegion[regionName].users.push({
          user_id: userId,
          records_created: records.filter(r => r.created_by === userId).length,
          records_updated: records.filter(r => r.updated_by === userId).length
        });
        usersByRegion[regionName].user_count++;
      }
    });

    // Convert to array format for the report
    const result = Object.values(usersByRegion).map(regionData => ({
      category: regionData.region_name,
      value: regionData.user_count,
      region_id: regionData.region_id,
      users: regionData.users,
      total_users: regionData.user_count
    }));

    return {
      main: result.sort((a, b) => b.value - a.value)
    };

  } catch (error) {
    console.error('Error in users by region script:', error);
    return {
      main: [],
      error: error.message
    };
  }
}
</server_script>